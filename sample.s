/* Automically generated by wasm2c */
#include <math.h>
#include <string.h>

#include "sample.s.h"
#define UNLIKELY(x) __builtin_expect(!!(x), 0)
#define LIKELY(x) __builtin_expect(!!(x), 1)

#define TRAP(x) (wasm_rt_trap(WASM_RT_TRAP_##x), 0)

#define FUNC_PROLOGUE                                            \
  if (++wasm_rt_call_stack_depth > WASM_RT_MAX_CALL_STACK_DEPTH) \
    TRAP(EXHAUSTION)

#define FUNC_EPILOGUE --wasm_rt_call_stack_depth

#define UNREACHABLE TRAP(UNREACHABLE)

#define CALL_INDIRECT(table, t, ft, x, ...)          \
  (LIKELY((x) < table.size && table.data[x].func &&  \
          table.data[x].func_type == func_types[ft]) \
       ? ((t)table.data[x].func)(__VA_ARGS__)        \
       : TRAP(CALL_INDIRECT))

#if WASM_RT_MEMCHECK_SIGNAL_HANDLER
#define MEMCHECK(mem, a, t)
#else
#define MEMCHECK(mem, a, t)  \
  if (UNLIKELY((a) + sizeof(t) > mem->size)) TRAP(OOB)
#endif

#if WABT_BIG_ENDIAN
static inline void load_data(void *dest, const void *src, size_t n) {
  size_t i = 0;
  u8 *dest_chars = dest;
  memcpy(dest, src, n);
  for (i = 0; i < (n>>1); i++) {
    u8 cursor = dest_chars[i];
    dest_chars[i] = dest_chars[n - i - 1];
    dest_chars[n - i - 1] = cursor;
  }
}
#define LOAD_DATA(m, o, i, s) load_data(&(m.data[m.size - o - s]), i, s)
#define DEFINE_LOAD(name, t1, t2, t3)                                                 \
  static inline t3 name(wasm_rt_memory_t* mem, u64 addr) {                            \
    MEMCHECK(mem, addr, t1);                                                          \
    t1 result;                                                                        \
    __builtin_memcpy(&result, &mem->data[mem->size - addr - sizeof(t1)], sizeof(t1)); \
    return (t3)(t2)result;                                                            \
  }

#define DEFINE_STORE(name, t1, t2)                                                     \
  static inline void name(wasm_rt_memory_t* mem, u64 addr, t2 value) {                 \
    MEMCHECK(mem, addr, t1);                                                           \
    t1 wrapped = (t1)value;                                                            \
    __builtin_memcpy(&mem->data[mem->size - addr - sizeof(t1)], &wrapped, sizeof(t1)); \
  }
#else
static inline void load_data(void *dest, const void *src, size_t n) {
  memcpy(dest, src, n);
}
#define LOAD_DATA(m, o, i, s) load_data(&(m.data[o]), i, s)
#define DEFINE_LOAD(name, t1, t2, t3)                        \
  static inline t3 name(wasm_rt_memory_t* mem, u64 addr) {   \
    MEMCHECK(mem, addr, t1);                                 \
    t1 result;                                               \
    __builtin_memcpy(&result, &mem->data[addr], sizeof(t1)); \
    return (t3)(t2)result;                                   \
  }

#define DEFINE_STORE(name, t1, t2)                                     \
  static inline void name(wasm_rt_memory_t* mem, u64 addr, t2 value) { \
    MEMCHECK(mem, addr, t1);                                           \
    t1 wrapped = (t1)value;                                            \
    __builtin_memcpy(&mem->data[addr], &wrapped, sizeof(t1));          \
  }
#endif

DEFINE_LOAD(i32_load, u32, u32, u32);
DEFINE_LOAD(i64_load, u64, u64, u64);
DEFINE_LOAD(f32_load, f32, f32, f32);
DEFINE_LOAD(f64_load, f64, f64, f64);
DEFINE_LOAD(i32_load8_s, s8, s32, u32);
DEFINE_LOAD(i64_load8_s, s8, s64, u64);
DEFINE_LOAD(i32_load8_u, u8, u32, u32);
DEFINE_LOAD(i64_load8_u, u8, u64, u64);
DEFINE_LOAD(i32_load16_s, s16, s32, u32);
DEFINE_LOAD(i64_load16_s, s16, s64, u64);
DEFINE_LOAD(i32_load16_u, u16, u32, u32);
DEFINE_LOAD(i64_load16_u, u16, u64, u64);
DEFINE_LOAD(i64_load32_s, s32, s64, u64);
DEFINE_LOAD(i64_load32_u, u32, u64, u64);
DEFINE_STORE(i32_store, u32, u32);
DEFINE_STORE(i64_store, u64, u64);
DEFINE_STORE(f32_store, f32, f32);
DEFINE_STORE(f64_store, f64, f64);
DEFINE_STORE(i32_store8, u8, u32);
DEFINE_STORE(i32_store16, u16, u32);
DEFINE_STORE(i64_store8, u8, u64);
DEFINE_STORE(i64_store16, u16, u64);
DEFINE_STORE(i64_store32, u32, u64);

#define I32_CLZ(x) ((x) ? __builtin_clz(x) : 32)
#define I64_CLZ(x) ((x) ? __builtin_clzll(x) : 64)
#define I32_CTZ(x) ((x) ? __builtin_ctz(x) : 32)
#define I64_CTZ(x) ((x) ? __builtin_ctzll(x) : 64)
#define I32_POPCNT(x) (__builtin_popcount(x))
#define I64_POPCNT(x) (__builtin_popcountll(x))

#define DIV_S(ut, min, x, y)                                 \
   ((UNLIKELY((y) == 0)) ?                TRAP(DIV_BY_ZERO)  \
  : (UNLIKELY((x) == min && (y) == -1)) ? TRAP(INT_OVERFLOW) \
  : (ut)((x) / (y)))

#define REM_S(ut, min, x, y)                                \
   ((UNLIKELY((y) == 0)) ?                TRAP(DIV_BY_ZERO) \
  : (UNLIKELY((x) == min && (y) == -1)) ? 0                 \
  : (ut)((x) % (y)))

#define I32_DIV_S(x, y) DIV_S(u32, INT32_MIN, (s32)x, (s32)y)
#define I64_DIV_S(x, y) DIV_S(u64, INT64_MIN, (s64)x, (s64)y)
#define I32_REM_S(x, y) REM_S(u32, INT32_MIN, (s32)x, (s32)y)
#define I64_REM_S(x, y) REM_S(u64, INT64_MIN, (s64)x, (s64)y)

#define DIVREM_U(op, x, y) \
  ((UNLIKELY((y) == 0)) ? TRAP(DIV_BY_ZERO) : ((x) op (y)))

#define DIV_U(x, y) DIVREM_U(/, x, y)
#define REM_U(x, y) DIVREM_U(%, x, y)

#define ROTL(x, y, mask) \
  (((x) << ((y) & (mask))) | ((x) >> (((mask) - (y) + 1) & (mask))))
#define ROTR(x, y, mask) \
  (((x) >> ((y) & (mask))) | ((x) << (((mask) - (y) + 1) & (mask))))

#define I32_ROTL(x, y) ROTL(x, y, 31)
#define I64_ROTL(x, y) ROTL(x, y, 63)
#define I32_ROTR(x, y) ROTR(x, y, 31)
#define I64_ROTR(x, y) ROTR(x, y, 63)

#define FMIN(x, y)                                          \
   ((UNLIKELY((x) != (x))) ? NAN                            \
  : (UNLIKELY((y) != (y))) ? NAN                            \
  : (UNLIKELY((x) == 0 && (y) == 0)) ? (signbit(x) ? x : y) \
  : (x < y) ? x : y)

#define FMAX(x, y)                                          \
   ((UNLIKELY((x) != (x))) ? NAN                            \
  : (UNLIKELY((y) != (y))) ? NAN                            \
  : (UNLIKELY((x) == 0 && (y) == 0)) ? (signbit(x) ? y : x) \
  : (x > y) ? x : y)

#define TRUNC_S(ut, st, ft, min, minop, max, x)                             \
  ((UNLIKELY((x) != (x)))                        ? TRAP(INVALID_CONVERSION) \
   : (UNLIKELY(!((x)minop(min) && (x) < (max)))) ? TRAP(INT_OVERFLOW)       \
                                                 : (ut)(st)(x))

#define I32_TRUNC_S_F32(x) TRUNC_S(u32, s32, f32, (f32)INT32_MIN, >=, 2147483648.f, x)
#define I64_TRUNC_S_F32(x) TRUNC_S(u64, s64, f32, (f32)INT64_MIN, >=, (f32)INT64_MAX, x)
#define I32_TRUNC_S_F64(x) TRUNC_S(u32, s32, f64, -2147483649., >, 2147483648., x)
#define I64_TRUNC_S_F64(x) TRUNC_S(u64, s64, f64, (f64)INT64_MIN, >=, (f64)INT64_MAX, x)

#define TRUNC_U(ut, ft, max, x)                                            \
  ((UNLIKELY((x) != (x)))                       ? TRAP(INVALID_CONVERSION) \
   : (UNLIKELY(!((x) > (ft)-1 && (x) < (max)))) ? TRAP(INT_OVERFLOW)       \
                                                : (ut)(x))

#define I32_TRUNC_U_F32(x) TRUNC_U(u32, f32, 4294967296.f, x)
#define I64_TRUNC_U_F32(x) TRUNC_U(u64, f32, (f32)UINT64_MAX, x)
#define I32_TRUNC_U_F64(x) TRUNC_U(u32, f64, 4294967296.,  x)
#define I64_TRUNC_U_F64(x) TRUNC_U(u64, f64, (f64)UINT64_MAX, x)

#define DEFINE_REINTERPRET(name, t1, t2)  \
  static inline t2 name(t1 x) {           \
    t2 result;                            \
    memcpy(&result, &x, sizeof(result));  \
    return result;                        \
  }

DEFINE_REINTERPRET(f32_reinterpret_i32, u32, f32)
DEFINE_REINTERPRET(i32_reinterpret_f32, f32, u32)
DEFINE_REINTERPRET(f64_reinterpret_i64, u64, f64)
DEFINE_REINTERPRET(i64_reinterpret_f64, f64, u64)


static u32 func_types[6];

static void init_func_types(void) {
  func_types[0] = wasm_rt_register_func_type(2, 0, WASM_RT_I32, WASM_RT_I32);
  func_types[1] = wasm_rt_register_func_type(1, 0, WASM_RT_I32);
  func_types[2] = wasm_rt_register_func_type(0, 1, WASM_RT_I32);
  func_types[3] = wasm_rt_register_func_type(3, 0, WASM_RT_I32, WASM_RT_I32, WASM_RT_I32);
  func_types[4] = wasm_rt_register_func_type(1, 1, WASM_RT_I32, WASM_RT_I32);
  func_types[5] = wasm_rt_register_func_type(0, 0);
}

static void w2c_f6(u32, u32);
static u32 w2c_f7(u32);
static void w2c_f8(void);
static u32 w2c_f9(u32);
static void w2c_main(void);

static u32 w2c_g0;

static void init_globals(void) {
  w2c_g0 = 65536u;
}

static wasm_rt_memory_t w2c_memory;

static wasm_rt_table_t w2c_T0;

static void w2c_f6(u32 w2c_p0, u32 w2c_p1) {
  FUNC_PROLOGUE;
  u32 w2c_i0, w2c_i1;
  u64 w2c_j1;
  w2c_i0 = w2c_p1;
  w2c_i0 = !(w2c_i0);
  if (w2c_i0) {goto w2c_B0;}
  w2c_L1: 
    w2c_i0 = w2c_p0;
    w2c_j1 = 0ull;
    i64_store((&w2c_memory), (u64)(w2c_i0), w2c_j1);
    w2c_i0 = w2c_p0;
    w2c_i1 = 8u;
    w2c_i0 += w2c_i1;
    w2c_p0 = w2c_i0;
    w2c_i0 = w2c_p1;
    w2c_i1 = 4294967295u;
    w2c_i0 += w2c_i1;
    w2c_p1 = w2c_i0;
    if (w2c_i0) {goto w2c_L1;}
  w2c_B0:;
  FUNC_EPILOGUE;
}

static u32 w2c_f7(u32 w2c_p0) {
  u32 w2c_l1 = 0, w2c_l2 = 0, w2c_l3 = 0, w2c_l4 = 0;
  FUNC_PROLOGUE;
  u32 w2c_i0, w2c_i1, w2c_i2;
  w2c_i0 = 65536u;
  w2c_l1 = w2c_i0;
  w2c_L1: 
    w2c_i0 = w2c_l1;
    w2c_i0 = i32_load((&w2c_memory), (u64)(w2c_i0) + 12u);
    if (w2c_i0) {goto w2c_B2;}
    w2c_i0 = w2c_l1;
    w2c_i0 = i32_load((&w2c_memory), (u64)(w2c_i0) + 8u);
    w2c_l2 = w2c_i0;
    w2c_i1 = w2c_p0;
    w2c_i0 = w2c_i0 >= w2c_i1;
    if (w2c_i0) {goto w2c_B0;}
    w2c_B2:;
    w2c_i0 = w2c_l1;
    w2c_i0 = i32_load((&w2c_memory), (u64)(w2c_i0));
    w2c_l1 = w2c_i0;
    if (w2c_i0) {goto w2c_L1;}
  w2c_i0 = 0u;
  w2c_l1 = w2c_i0;
  w2c_i0 = 0u;
  w2c_i0 = i32_load((&w2c_memory), (u64)(w2c_i0) + 8u);
  w2c_l2 = w2c_i0;
  w2c_B0:;
  w2c_i0 = w2c_l2;
  w2c_i1 = w2c_p0;
  w2c_i2 = 7u;
  w2c_i1 += w2c_i2;
  w2c_i2 = 4294967288u;
  w2c_i1 &= w2c_i2;
  w2c_l3 = w2c_i1;
  w2c_i0 -= w2c_i1;
  w2c_l2 = w2c_i0;
  w2c_i1 = 24u;
  w2c_i0 = w2c_i0 < w2c_i1;
  if (w2c_i0) {goto w2c_B3;}
  w2c_i0 = w2c_l1;
  w2c_i1 = w2c_l3;
  w2c_i0 += w2c_i1;
  w2c_i1 = 16u;
  w2c_i0 += w2c_i1;
  w2c_p0 = w2c_i0;
  w2c_i1 = w2c_l1;
  w2c_i1 = i32_load((&w2c_memory), (u64)(w2c_i1));
  w2c_l4 = w2c_i1;
  i32_store((&w2c_memory), (u64)(w2c_i0), w2c_i1);
  w2c_i0 = w2c_l4;
  w2c_i0 = !(w2c_i0);
  if (w2c_i0) {goto w2c_B4;}
  w2c_i0 = w2c_l4;
  w2c_i1 = w2c_p0;
  i32_store((&w2c_memory), (u64)(w2c_i0) + 4, w2c_i1);
  w2c_B4:;
  w2c_i0 = w2c_p0;
  w2c_i1 = w2c_l2;
  w2c_i2 = 4294967280u;
  w2c_i1 += w2c_i2;
  i32_store((&w2c_memory), (u64)(w2c_i0) + 8, w2c_i1);
  w2c_i0 = w2c_p0;
  w2c_i1 = 0u;
  i32_store((&w2c_memory), (u64)(w2c_i0) + 12, w2c_i1);
  w2c_i0 = w2c_p0;
  w2c_i1 = w2c_l1;
  i32_store((&w2c_memory), (u64)(w2c_i0) + 4, w2c_i1);
  w2c_i0 = w2c_l1;
  w2c_i1 = w2c_p0;
  i32_store((&w2c_memory), (u64)(w2c_i0), w2c_i1);
  w2c_i0 = w2c_l1;
  w2c_i1 = w2c_l3;
  i32_store((&w2c_memory), (u64)(w2c_i0) + 8, w2c_i1);
  w2c_B3:;
  w2c_i0 = w2c_l1;
  w2c_i1 = 1u;
  i32_store((&w2c_memory), (u64)(w2c_i0) + 12, w2c_i1);
  w2c_i0 = w2c_l1;
  w2c_i1 = 16u;
  w2c_i0 += w2c_i1;
  FUNC_EPILOGUE;
  return w2c_i0;
}

static void w2c_f8(void) {
  FUNC_PROLOGUE;
  u32 w2c_i0, w2c_i1, w2c_i2;
  w2c_i0 = 0u;
  w2c_i1 = 0u;
  i32_store((&w2c_memory), (u64)(w2c_i0) + 65536, w2c_i1);
  w2c_i0 = 0u;
  w2c_i1 = 0u;
  i32_store((&w2c_memory), (u64)(w2c_i0) + 65540, w2c_i1);
  w2c_i0 = 0u;
  w2c_i1 = 0u;
  i32_store((&w2c_memory), (u64)(w2c_i0) + 65548, w2c_i1);
  w2c_i0 = 0u;
  w2c_i1 = w2c_memory.pages;
  w2c_i2 = 16u;
  w2c_i1 <<= (w2c_i2 & 31);
  w2c_i2 = 4294901744u;
  w2c_i1 += w2c_i2;
  i32_store((&w2c_memory), (u64)(w2c_i0) + 65544, w2c_i1);
  FUNC_EPILOGUE;
}

static u32 w2c_f9(u32 w2c_p0) {
  u32 w2c_l1 = 0;
  FUNC_PROLOGUE;
  u32 w2c_i0, w2c_i1, w2c_i2;
  u64 w2c_j1;
  w2c_i0 = w2c_g0;
  w2c_i1 = 64u;
  w2c_i0 -= w2c_i1;
  w2c_l1 = w2c_i0;
  w2c_g0 = w2c_i0;
  w2c_i0 = w2c_l1;
  w2c_i1 = 56u;
  w2c_i0 += w2c_i1;
  w2c_j1 = 0ull;
  i64_store((&w2c_memory), (u64)(w2c_i0), w2c_j1);
  w2c_i0 = w2c_l1;
  w2c_j1 = 0ull;
  i64_store((&w2c_memory), (u64)(w2c_i0) + 48, w2c_j1);
  w2c_i0 = w2c_l1;
  w2c_j1 = 0ull;
  i64_store((&w2c_memory), (u64)(w2c_i0) + 40, w2c_j1);
  w2c_i0 = w2c_l1;
  w2c_j1 = 0ull;
  i64_store((&w2c_memory), (u64)(w2c_i0) + 32, w2c_j1);
  w2c_i0 = w2c_l1;
  w2c_i1 = 4u;
  w2c_f6(w2c_i0, w2c_i1);
  w2c_i0 = w2c_l1;
  w2c_i1 = w2c_p0;
  w2c_i2 = 1u;
  w2c_i1 &= w2c_i2;
  i32_store8((&w2c_memory), (u64)(w2c_i0), w2c_i1);
  w2c_i0 = w2c_l1;
  w2c_i1 = 32u;
  w2c_i0 += w2c_i1;
  w2c_i1 = w2c_l1;
  (*Z_ethereumZ_storageStoreZ_vii)(w2c_i0, w2c_i1);
  w2c_i0 = w2c_l1;
  w2c_i1 = 64u;
  w2c_i0 += w2c_i1;
  w2c_g0 = w2c_i0;
  w2c_i0 = 0u;
  FUNC_EPILOGUE;
  return w2c_i0;
}

static void w2c_main(void) {
  u32 w2c_l0 = 0, w2c_l1 = 0, w2c_l2 = 0;
  FUNC_PROLOGUE;
  u32 w2c_i0, w2c_i1, w2c_i2;
  u64 w2c_j0, w2c_j1;
  w2c_i0 = w2c_g0;
  w2c_i1 = 16u;
  w2c_i0 -= w2c_i1;
  w2c_l0 = w2c_i0;
  w2c_g0 = w2c_i0;
  w2c_i0 = w2c_l0;
  (*Z_ethereumZ_getCallValueZ_vi)(w2c_i0);
  w2c_i0 = w2c_l0;
  w2c_j0 = i64_load((&w2c_memory), (u64)(w2c_i0));
  w2c_i1 = w2c_l0;
  w2c_i2 = 8u;
  w2c_i1 += w2c_i2;
  w2c_j1 = i64_load((&w2c_memory), (u64)(w2c_i1));
  w2c_j0 |= w2c_j1;
  w2c_j1 = 0ull;
  w2c_i0 = w2c_j0 != w2c_j1;
  if (w2c_i0) {goto w2c_B1;}
  w2c_f8();
  w2c_i0 = 0u;
  w2c_i1 = (*Z_ethereumZ_getCodeSizeZ_iv)();
  w2c_i2 = 4294965707u;
  w2c_i1 += w2c_i2;
  w2c_l1 = w2c_i1;
  i32_store((&w2c_memory), (u64)(w2c_i0) + 900, w2c_i1);
  w2c_i0 = 0u;
  w2c_i1 = w2c_l1;
  w2c_i1 = w2c_f7(w2c_i1);
  w2c_l2 = w2c_i1;
  i32_store((&w2c_memory), (u64)(w2c_i0) + 904, w2c_i1);
  w2c_i0 = w2c_l2;
  w2c_i1 = 1589u;
  w2c_i2 = w2c_l1;
  (*Z_ethereumZ_codeCopyZ_viii)(w2c_i0, w2c_i1, w2c_i2);
  w2c_i0 = w2c_l1;
  w2c_i1 = 31u;
  w2c_i0 = w2c_i0 > w2c_i1;
  if (w2c_i0) {goto w2c_B0;}
  w2c_i0 = w2c_l0;
  w2c_i1 = 16u;
  w2c_i0 += w2c_i1;
  w2c_g0 = w2c_i0;
  w2c_i0 = 3u;
  goto w2c_Bfunc;
  w2c_B1:;
  w2c_i0 = 0u;
  w2c_i1 = 0u;
  (*Z_ethereumZ_revertZ_vii)(w2c_i0, w2c_i1);
  UNREACHABLE;
  w2c_B0:;
  w2c_i0 = w2c_l2;
  w2c_i1 = 24u;
  w2c_i0 += w2c_i1;
  w2c_j0 = i64_load((&w2c_memory), (u64)(w2c_i0));
  w2c_j1 = 0ull;
  w2c_i0 = w2c_j0 != w2c_j1;
  w2c_i0 = w2c_f9(w2c_i0);
  w2c_i0 = 0u;
  w2c_i1 = 898u;
  (*Z_ethereumZ_finishZ_vii)(w2c_i0, w2c_i1);
  UNREACHABLE;
  w2c_Bfunc:;
  FUNC_EPILOGUE;
}

static const u8 data_segment_data_0[] = {
  0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x1c, 0x06, 0x60, 
  0x01, 0x7f, 0x00, 0x60, 0x00, 0x01, 0x7f, 0x60, 0x03, 0x7f, 0x7f, 0x7f, 
  0x00, 0x60, 0x02, 0x7f, 0x7f, 0x00, 0x60, 0x01, 0x7f, 0x01, 0x7f, 0x60, 
  0x00, 0x00, 0x02, 0x9f, 0x01, 0x07, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 
  0x65, 0x75, 0x6d, 0x0c, 0x67, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x56, 
  0x61, 0x6c, 0x75, 0x65, 0x00, 0x00, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 
  0x65, 0x75, 0x6d, 0x0f, 0x67, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x44, 
  0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x00, 0x01, 0x08, 0x65, 0x74, 
  0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x44, 
  0x61, 0x74, 0x61, 0x43, 0x6f, 0x70, 0x79, 0x00, 0x02, 0x08, 0x65, 0x74, 
  0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 
  0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x00, 0x03, 0x08, 0x65, 0x74, 0x68, 
  0x65, 0x72, 0x65, 0x75, 0x6d, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 
  0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x00, 0x03, 0x08, 0x65, 0x74, 0x68, 
  0x65, 0x72, 0x65, 0x75, 0x6d, 0x06, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 
  0x00, 0x03, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x06, 
  0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x00, 0x03, 0x03, 0x05, 0x04, 0x03, 
  0x04, 0x05, 0x05, 0x04, 0x05, 0x01, 0x70, 0x01, 0x01, 0x01, 0x05, 0x03, 
  0x01, 0x00, 0x02, 0x06, 0x08, 0x01, 0x7f, 0x01, 0x41, 0x80, 0x80, 0x04, 
  0x0b, 0x07, 0x11, 0x02, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x02, 
  0x00, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x0a, 0x0a, 0x87, 0x05, 0x04, 
  0x24, 0x00, 0x02, 0x40, 0x20, 0x01, 0x45, 0x0d, 0x00, 0x03, 0x40, 0x20, 
  0x00, 0x42, 0x00, 0x37, 0x03, 0x00, 0x20, 0x00, 0x41, 0x08, 0x6a, 0x21, 
  0x00, 0x20, 0x01, 0x41, 0x7f, 0x6a, 0x22, 0x01, 0x0d, 0x00, 0x0b, 0x0b, 
  0x0b, 0xa6, 0x01, 0x01, 0x04, 0x7f, 0x41, 0x80, 0x80, 0x04, 0x21, 0x01, 
  0x02, 0x40, 0x03, 0x40, 0x02, 0x40, 0x20, 0x01, 0x28, 0x02, 0x0c, 0x0d, 
  0x00, 0x20, 0x01, 0x28, 0x02, 0x08, 0x22, 0x02, 0x20, 0x00, 0x4f, 0x0d, 
  0x02, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x00, 0x22, 0x01, 0x0d, 0x00, 0x0b, 
  0x41, 0x00, 0x21, 0x01, 0x41, 0x00, 0x28, 0x02, 0x08, 0x21, 0x02, 0x0b, 
  0x02, 0x40, 0x20, 0x02, 0x20, 0x00, 0x41, 0x07, 0x6a, 0x41, 0x78, 0x71, 
  0x22, 0x03, 0x6b, 0x22, 0x02, 0x41, 0x18, 0x49, 0x0d, 0x00, 0x20, 0x01, 
  0x20, 0x03, 0x6a, 0x41, 0x10, 0x6a, 0x22, 0x00, 0x20, 0x01, 0x28, 0x02, 
  0x00, 0x22, 0x04, 0x36, 0x02, 0x00, 0x02, 0x40, 0x20, 0x04, 0x45, 0x0d, 
  0x00, 0x20, 0x04, 0x20, 0x00, 0x36, 0x02, 0x04, 0x0b, 0x20, 0x00, 0x20, 
  0x02, 0x41, 0x70, 0x6a, 0x36, 0x02, 0x08, 0x20, 0x00, 0x41, 0x00, 0x36, 
  0x02, 0x0c, 0x20, 0x00, 0x20, 0x01, 0x36, 0x02, 0x04, 0x20, 0x01, 0x20, 
  0x00, 0x36, 0x02, 0x00, 0x20, 0x01, 0x20, 0x03, 0x36, 0x02, 0x08, 0x0b, 
  0x20, 0x01, 0x41, 0x01, 0x36, 0x02, 0x0c, 0x20, 0x01, 0x41, 0x10, 0x6a, 
  0x0b, 0x2e, 0x00, 0x41, 0x00, 0x41, 0x00, 0x36, 0x02, 0x80, 0x80, 0x04, 
  0x41, 0x00, 0x41, 0x00, 0x36, 0x02, 0x84, 0x80, 0x04, 0x41, 0x00, 0x41, 
  0x00, 0x36, 0x02, 0x8c, 0x80, 0x04, 0x41, 0x00, 0x3f, 0x00, 0x41, 0x10, 
  0x74, 0x41, 0xf0, 0xff, 0x7b, 0x6a, 0x36, 0x02, 0x88, 0x80, 0x04, 0x0b, 
  0x88, 0x03, 0x01, 0x03, 0x7f, 0x23, 0x00, 0x41, 0xa0, 0x01, 0x6b, 0x22, 
  0x00, 0x24, 0x00, 0x20, 0x00, 0x41, 0x08, 0x6a, 0x10, 0x00, 0x02, 0x40, 
  0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x20, 0x00, 0x29, 0x03, 0x08, 0x20, 
  0x00, 0x41, 0x10, 0x6a, 0x29, 0x03, 0x00, 0x84, 0x42, 0x00, 0x52, 0x0d, 
  0x00, 0x10, 0x09, 0x41, 0x00, 0x10, 0x01, 0x22, 0x01, 0x36, 0x02, 0x04, 
  0x41, 0x00, 0x20, 0x01, 0x10, 0x08, 0x22, 0x02, 0x36, 0x02, 0x08, 0x20, 
  0x02, 0x41, 0x00, 0x20, 0x01, 0x10, 0x02, 0x20, 0x01, 0x41, 0x03, 0x4d, 
  0x0d, 0x01, 0x41, 0x00, 0x20, 0x02, 0x28, 0x02, 0x00, 0x22, 0x01, 0x36, 
  0x02, 0x00, 0x02, 0x40, 0x20, 0x01, 0x41, 0xed, 0x98, 0x99, 0xe7, 0x03, 
  0x46, 0x0d, 0x00, 0x20, 0x01, 0x41, 0xcd, 0xc9, 0xbf, 0xcf, 0x7a, 0x47, 
  0x0d, 0x02, 0x20, 0x00, 0x41, 0x80, 0x01, 0x6a, 0x41, 0x18, 0x6a, 0x42, 
  0x00, 0x37, 0x03, 0x00, 0x20, 0x00, 0x42, 0x00, 0x37, 0x03, 0x90, 0x01, 
  0x20, 0x00, 0x42, 0x00, 0x37, 0x03, 0x88, 0x01, 0x20, 0x00, 0x42, 0x00, 
  0x37, 0x03, 0x80, 0x01, 0x20, 0x00, 0x41, 0x80, 0x01, 0x6a, 0x20, 0x00, 
  0x41, 0xe0, 0x00, 0x6a, 0x10, 0x03, 0x20, 0x00, 0x41, 0xc0, 0x00, 0x6a, 
  0x41, 0x18, 0x6a, 0x42, 0x00, 0x37, 0x03, 0x00, 0x20, 0x00, 0x42, 0x00, 
  0x37, 0x03, 0x50, 0x20, 0x00, 0x42, 0x00, 0x37, 0x03, 0x48, 0x20, 0x00, 
  0x42, 0x00, 0x37, 0x03, 0x40, 0x20, 0x00, 0x2d, 0x00, 0x60, 0x21, 0x01, 
  0x20, 0x00, 0x41, 0x20, 0x6a, 0x41, 0x04, 0x10, 0x07, 0x20, 0x00, 0x20, 
  0x01, 0x41, 0x7f, 0x73, 0x41, 0x01, 0x71, 0x3a, 0x00, 0x20, 0x20, 0x00, 
  0x41, 0xc0, 0x00, 0x6a, 0x20, 0x00, 0x41, 0x20, 0x6a, 0x10, 0x04, 0x41, 
  0x00, 0x45, 0x0d, 0x03, 0x41, 0x00, 0x41, 0x00, 0x10, 0x05, 0x00, 0x0b, 
  0x20, 0x00, 0x41, 0x98, 0x01, 0x6a, 0x42, 0x00, 0x37, 0x03, 0x00, 0x20, 
  0x00, 0x42, 0x00, 0x37, 0x03, 0x90, 0x01, 0x20, 0x00, 0x42, 0x00, 0x37, 
  0x03, 0x88, 0x01, 0x20, 0x00, 0x42, 0x00, 0x37, 0x03, 0x80, 0x01, 0x20, 
  0x00, 0x41, 0x80, 0x01, 0x6a, 0x20, 0x00, 0x41, 0xe0, 0x00, 0x6a, 0x10, 
  0x03, 0x20, 0x00, 0x20, 0x00, 0x2d, 0x00, 0x60, 0x41, 0x01, 0x71, 0x3a, 
  0x00, 0x1f, 0x41, 0x00, 0x45, 0x0d, 0x03, 0x41, 0x00, 0x41, 0x00, 0x10, 
  0x05, 0x00, 0x0b, 0x41, 0x00, 0x41, 0x00, 0x10, 0x05, 0x00, 0x0b, 0x41, 
  0x00, 0x41, 0x00, 0x10, 0x05, 0x00, 0x0b, 0x41, 0x00, 0x41, 0x00, 0x10, 
  0x06, 0x00, 0x0b, 0x41, 0x20, 0x10, 0x08, 0x22, 0x01, 0x41, 0x04, 0x10, 
  0x07, 0x20, 0x01, 0x41, 0x1f, 0x6a, 0x20, 0x00, 0x2d, 0x00, 0x1f, 0x3a, 
  0x00, 0x00, 0x20, 0x01, 0x41, 0x20, 0x10, 0x06, 0x00, 0x0b, 
};

static void init_memory(void) {
  wasm_rt_allocate_memory((&w2c_memory), 2, 65536);
  LOAD_DATA(w2c_memory, 0u, data_segment_data_0, 898);
}

static void init_table(void) {
  uint32_t offset;
  wasm_rt_allocate_table((&w2c_T0), 1, 1);
}

/* export: 'memory' */
wasm_rt_memory_t (*WASM_RT_ADD_PREFIX(Z_memory));
/* export: 'main' */
void (*WASM_RT_ADD_PREFIX(Z_mainZ_vv))(void);

static void init_exports(void) {
  /* export: 'memory' */
  WASM_RT_ADD_PREFIX(Z_memory) = (&w2c_memory);
  /* export: 'main' */
  WASM_RT_ADD_PREFIX(Z_mainZ_vv) = (&w2c_main);
}

void WASM_RT_ADD_PREFIX(init)(void) {
  init_func_types();
  init_globals();
  init_memory();
  init_table();
  init_exports();
}
